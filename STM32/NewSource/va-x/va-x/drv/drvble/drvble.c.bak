/*
 * VA-X BLEドライバ (BTS-01)
 *
 * Copyright (C) 2018 Bionics co.,ltd.
 *
 * 変更:
 * - 2018/01/05 Takuya Goto <goto-takuya@bionics-k.co.jp>: 新規作成
 */

#include "drvble.h"

#include <string.h> 

#include <kernel.h>
#include <sil.h>
#include <t_syslog.h>
#include <t_stdlib.h>

#include "stm32f7xx.h"

#include "kernel_cfg.h"
#include "drvcmn_gpio.h"
#include "drvcmn_uart.h"
#include "cmndbg.h"

/*
 * マクロ定義
 */

// UARTの通信内容をダンプ
#define DUMP_UART_COMM

// サービスコールのエラーのログ出力
static inline void svc_perror(const char *file, int_t line, const char *expr, ER ercd)
{
	if (ercd < 0) {
		t_perror(LOG_ERROR, file, line, expr, ercd);
	}
}
#define	SVC_PERROR(expr)	svc_perror(__FILE__, __LINE__, #expr, (expr))

// デバッグログ
#if 0
#define DBGLOG0(msg)					syslog(LOG_NOTICE, "[DRVBLE]" msg)
#define DBGLOG1(msg, arg1)				syslog(LOG_NOTICE, "[DRVBLE]" msg, arg1)
#define DBGLOG2(msg, arg1, arg2)		syslog(LOG_NOTICE, "[DRVBLE]" msg, arg1, arg2)
#define DBGLOG3(msg, arg1, arg2, arg3)	syslog(LOG_NOTICE, "[DRVBLE]" msg, arg1, arg2, arg3)
#else
#define DBGLOG0(msg)
#define DBGLOG1(msg, arg1)
#define DBGLOG2(msg, arg1, arg2)
#define DBGLOG3(msg, arg1, arg2, arg3)
#endif

/*
 * 型定義
 */

#define COMMAND_BUF_SIZE	64
typedef struct {
    DRVBLE_CALLBACK_T callback;
    bool_t ready;
    uint8_t command_buf[COMMAND_BUF_SIZE];
} BLE_CONTEXT_T;

typedef struct {
    uint32_t msg;
    intptr_t pdata;
    size_t size;
    int32_t timeout;
    DRVBLE_CALLBACK_T callback;
} DRVBLE_MPFBLK_T;

// DRVBLE_MPFBLK_SIZE は sizeof(DRVBLE_MPFBKL) に一致させること
static_assert(sizeof(DRVBLE_MPFBLK_T) == DRVBLE_MPFBLK_SIZE, "MPF size");

uint8_t command_buft[COMMAND_BUF_SIZE];

/*
 * 内部関数プロトタイプ
 */

// メッセージ送信
static void mpf_send(int dtq, int msg, intptr_t pdata, size_t size, int32_t timeout, DRVBLE_CALLBACK_T callback);

/* BLEドライバ初期化 */
static void ble_initialize(DRVBLE_CALLBACK_T callback);

/* BLEモジュール出荷初期化 */
static void ble_factory_reset(DRVBLE_CALLBACK_T callback, const BNVA_DEVICE_ID_T* device_id);

/* 送受信可能にする */
static void ble_get_ready(DRVBLE_CALLBACK_T callback);

/* 電源OFF */
static void ble_power_off(DRVBLE_CALLBACK_T callback);

/* 送信 */
static void ble_send(const uint8_t* data, size_t size, int32_t timeout, DRVBLE_CALLBACK_T callback);

/* 受信 */
static void ble_receive(uint8_t* data, size_t size, int32_t timeout, DRVBLE_CALLBACK_T callback);

/* ATコマンド */
static int ble_command(const uint8_t* command, size_t command_len, const uint8_t* resp, size_t resp_len);

/* UART送信 */
static int uart_send(size_t* count, const uint8_t* data, size_t size, int32_t timeout);

/* UART受信 */
static int uart_receive(size_t* count, uint8_t* data, size_t size, int32_t timeout);

/* UART ISRコールバック */
static bool_t uart_isr_callback(int type, uint32_t opt);


/*
 * 定数定義
 */

// GPIO(UART)
static const DRVCMN_GPIO_PIN_T GPIO_PINS_UART[] = {
    { DRVCMN_GPIO_PORT_B, 14 },
    { DRVCMN_GPIO_PORT_B, 15 },
    { DRVCMN_GPIO_PORT_D, 0  },
    { DRVCMN_GPIO_PORT_D, 1  },
};

// GPIO設定(UART)
static const DRVCMN_GPIO_SETTING_T GPIO_SETTING_UART = {
    .mode = DRVCMN_GPIO_MODE_AF,
    .otype = DRVCMN_GPIO_OTYPE_PP,
    .ospeed = DRVCMN_GPIO_OSPEED_HIGH,
    .pupd = DRVCMN_GPIO_PUPD_PULLUP,
    .afno = 8,
};

// GPIO(BTS-01)
static const DRVCMN_GPIO_PIN_T GPIO_PIN_BLE_ON =	{ DRVCMN_GPIO_PORT_D,	14	};	// BLE_ON
static const DRVCMN_GPIO_PIN_T GPIO_PIN_RST = 		{ DRVCMN_GPIO_PORT_D,	15	};	// RST
static const DRVCMN_GPIO_PIN_T GPIO_PIN_INIT =		{ DRVCMN_GPIO_PORT_C,	12	};	// INIT
static const DRVCMN_GPIO_PIN_T GPIO_PIN_CONN =		{ DRVCMN_GPIO_PORT_C,	11	};	// CONN

// GPIO設定(BTS-01, OD)
static const DRVCMN_GPIO_SETTING_T GPIO_SETTING_BLE_OD = {
    .mode = DRVCMN_GPIO_MODE_GPOUT,
    .otype = DRVCMN_GPIO_OTYPE_OD,
    .ospeed = DRVCMN_GPIO_OSPEED_HIGH,
    .pupd = DRVCMN_GPIO_PUPD_NONE,
};

// GPIO設定(BTS-01, PP)
static const DRVCMN_GPIO_SETTING_T GPIO_SETTING_BLE_PP = {
    .mode = DRVCMN_GPIO_MODE_GPOUT,
    .otype = DRVCMN_GPIO_OTYPE_PP,
    .ospeed = DRVCMN_GPIO_OSPEED_HIGH,
    .pupd = DRVCMN_GPIO_PUPD_PULLDOWN,
};

// GPIO設定(BTS-01, IN)
static const DRVCMN_GPIO_SETTING_T GPIO_SETTING_BLE_IN = {
    .mode = DRVCMN_GPIO_MODE_INPUT,
    .otype = DRVCMN_GPIO_OTYPE_PP,
    .ospeed = DRVCMN_GPIO_OSPEED_HIGH,
    .pupd = DRVCMN_GPIO_PUPD_PULLDOWN,
};

static const struct {
    const DRVCMN_GPIO_PIN_T* pin;
    const DRVCMN_GPIO_SETTING_T* setting;
    int initial_value;
} GPIO_PINS_BLE[] = {
    { &GPIO_PIN_BLE_ON,	&GPIO_SETTING_BLE_PP,	0	},	// BLE_ON (PP, Active H)
    { &GPIO_PIN_RST,	&GPIO_SETTING_BLE_OD,	1	},	// RST (OD, Active L)
    { &GPIO_PIN_INIT,	&GPIO_SETTING_BLE_OD,	1	},	// INIT (OD, Active L)
    { &GPIO_PIN_CONN,	&GPIO_SETTING_BLE_IN,	-1	},	// CONN (IN, Active H)
};

// UART設定
static const int BLE_UART = 4;	// UART4
static const DRVCMN_UART_SETTING_T UART_SETTING = {
    .clocksel = DRVCMN_UART_CLOCKSEL_SYS,
    .baudrate = 38400,
    .wordlen = DRVCMN_UART_WORD_8BIT,
    .parity = DRVCMN_UART_PARITY_NONE,
    .stop = DRVCMN_UART_STOP_1,
    .hwflow = true,
    .callback = uart_isr_callback,
};

// メッセージ番号
enum {
    MSG_INITIALIZE = 1,
    MSG_FACTORY_RESET,
    MSG_GET_READY,
    MSG_POWER_OFF,
	MSG_SEND,
	MSG_RECEIVE,
};

// イベントフラグ
static const FLGPTN FLGPTN_UART_TXCOMPLETE = (0x1 << 0);
static const FLGPTN FLGPTN_UART_RXCOMPLETE = (0x1 << 1);
static const FLGPTN FLGPTN_RXCANCEL_REQ =    (0x1 << 2);

// データキュータイムアウト
static const int32_t DTQTIMEOUT = 1000;

// ATコマンドタイムアウト
//static const int32_t AT_TIMEOUT = 1000;
static const int32_t AT_TIMEOUT = -1;

/*
 * 内部変数
 */
static BLE_CONTEXT_T s_context = {0};

/*
 * ペリフェラル初期化
 */
void drvble_initialize_peripherals()
{
    DBGLOG0("drvble_ini_per_state .");
    // GPIO初期化(UART)
    for (int i = 0; i < sizeof(GPIO_PINS_UART) / sizeof(GPIO_PINS_UART[0]); i++) {
        drvcmn_gpio_pin_initialize(&(GPIO_PINS_UART[i]), &GPIO_SETTING_UART);
    }

    // GPIO初期化(BTS-01)
    for (int i = 0; i < sizeof(GPIO_PINS_BLE) / sizeof(GPIO_PINS_BLE[0]); i++) {
        drvcmn_gpio_pin_initialize(GPIO_PINS_BLE[i].pin, GPIO_PINS_BLE[i].setting);
        if (GPIO_PINS_BLE[i].initial_value >= 0) {
            drvcmn_gpio_pin_set(GPIO_PINS_BLE[i].pin, GPIO_PINS_BLE[i].initial_value);
        }
    }

    // UART初期化
    drvcmn_uart_initialize(BLE_UART, &UART_SETTING);
}

/*
 * ドライバ初期化
 */
void drvble_initialize(DRVBLE_CALLBACK_T callback)
{
    DBGLOG0("drvble_ini_state .");
    // タスク起動
    ER er = 0;

    act_tsk(TSK_DRVBLE);
    assert(er == E_OK);

    act_tsk(TSK_DRVBLE_RX);
    assert(er == E_OK);

    mpf_send(DTQ_DRVBLE, MSG_INITIALIZE, (intptr_t)NULL, 0, 0, callback);
}

/*
 * BLEモジュール出荷初期化
 */
void drvble_factory_reset(DRVBLE_CALLBACK_T callback, const BNVA_DEVICE_ID_T* device_id)
{
    mpf_send(DTQ_DRVBLE, MSG_FACTORY_RESET, (intptr_t)device_id, 0, 0, callback);
}

/*
 * 送受信可能にする
 */
void drvble_get_ready(DRVBLE_CALLBACK_T callback)
{
    mpf_send(DTQ_DRVBLE, MSG_GET_READY, (intptr_t)NULL, 0, 0, callback);
}

/*
 * 電源OFF
 */
void drvble_power_off(DRVBLE_CALLBACK_T callback)
{
    mpf_send(DTQ_DRVBLE, MSG_POWER_OFF, (intptr_t)NULL, 0, 0, callback);
}

/*
 * 送信
 */
void drvble_send(const uint8_t* data, size_t size, int32_t timeout, DRVBLE_CALLBACK_T callback)
{
    mpf_send(DTQ_DRVBLE, MSG_SEND, (intptr_t)data, size, timeout, callback);
}

/*
 * 受信
 */
void drvble_receive(uint8_t* data, size_t size, int32_t timeout, DRVBLE_CALLBACK_T callback)
{
    mpf_send(DTQ_DRVBLE_RX, MSG_RECEIVE, (intptr_t)data, size, timeout, callback);
}

/*
 * 受信キャンセル
 */
void drvble_cancel_receive()
{
    ER er = set_flg(FLG_DRVBLE, FLGPTN_RXCANCEL_REQ);
    assert(er == E_OK);
}

/*
 * 制御・送信タスク
 */
void drvble_task(intptr_t exinf)
{
    syslog(LOG_NOTICE, "drvble_task() starts .");

    while (true) {
        DRVBLE_MPFBLK_T* blk = NULL;
        ER er = 0;
        er = trcv_dtq(DTQ_DRVBLE, (intptr_t*)&blk, TMO_FEVR);
        assert(er == E_OK);
        assert(blk);
        switch (blk->msg) {
        case MSG_INITIALIZE:
            assert(blk->callback);
            ble_initialize(blk->callback);
            blk->callback(DRVBLE_EVT_INITIALIZE_COMPLETE, 0, 0);
            break;
        case MSG_FACTORY_RESET:
            ble_factory_reset(blk->callback, (BNVA_DEVICE_ID_T*)blk->pdata);
            break;
        case MSG_GET_READY:
            ble_get_ready(blk->callback);
            break;
        case MSG_POWER_OFF:
            ble_power_off(blk->callback);
            break;
        case MSG_SEND:
            ble_send((const uint8_t*)blk->pdata, blk->size, blk->timeout, blk->callback);
            break;
        default:
            assert(false);
            break;
        }

        er = rel_mpf(MPF_DRVBLE, blk);
        assert(er == E_OK);
    }
}

/*
 * 受信タスク
 */
void drvble_rx_task(intptr_t exinf)
{
    syslog(LOG_NOTICE, "drvble_rx_task() starts .");

    while (true) {
        DRVBLE_MPFBLK_T* blk = NULL;
        ER er = 0;
        er = trcv_dtq(DTQ_DRVBLE_RX, (intptr_t*)&blk, TMO_FEVR);
        assert(er == E_OK);
        switch (blk->msg) {
        case MSG_RECEIVE:
            ble_receive((uint8_t*)blk->pdata, blk->size, blk->timeout, blk->callback);
            break;
        default:
            assert(false);
            break;
        }

        er = rel_mpf(MPF_DRVBLE, blk);
        assert(er == E_OK);
    }
}

/*
 * 内部関数
 */

/*
 */
void mpf_send(int dtq, int msg, intptr_t pdata, size_t size, int32_t timeout, DRVBLE_CALLBACK_T callback)
{
    DRVBLE_MPFBLK_T* blk = NULL;
    ER er = 0;
    er = tget_mpf(MPF_DRVBLE, (void**)&blk, DTQTIMEOUT);
    assert(er == E_OK);

    blk->msg = msg;
    blk->pdata = pdata;
    blk->size = size;
    blk->timeout = timeout;
    blk->callback = callback;
    er = tsnd_dtq(dtq, (intptr_t)blk, DTQTIMEOUT);
    assert(er == E_OK);
}

/*
 * BLEドライバ初期化
 */
void ble_initialize(DRVBLE_CALLBACK_T callback)
{
    assert(callback);

    int error = DRVBLE_ERROR_NONE;

    callback(DRVBLE_EVT_FACTORY_RESET_COMPLETE, error, 0);
}

/*
 * BLEモジュール出荷初期化
 */
void ble_factory_reset(DRVBLE_CALLBACK_T callback, const BNVA_DEVICE_ID_T* device_id)
{
    assert(callback);
    assert(device_id);

    int error = DRVBLE_ERROR_NONE;

    drvcmn_gpio_pin_set(&GPIO_PIN_BLE_ON, false);	// BLE_ON => L (電源OFF)
    drvcmn_gpio_pin_set(&GPIO_PIN_RST, false);		// RESET => L (リセット)
    drvcmn_gpio_pin_set(&GPIO_PIN_INIT, false);		// INIT => L (初期化あり)

    drvcmn_gpio_pin_set(&GPIO_PIN_BLE_ON, true);	// BLE_ON => H (電源ON)
    dly_tsk(1);
    drvcmn_gpio_pin_set(&GPIO_PIN_RST, true);		// RESET => H (リセット解除)

    error = ble_command(NULL, 0, (const uint8_t*)"\r\nOK\r\n", 6);
    if (error) { assert(false); goto end; }

    s_context.command_buf[0] = '\0';
    static const char AT_CDN[] = "AT+CDN=";
    size_t pos = 0;
    memcpy(&(s_context.command_buf[pos]), AT_CDN, sizeof(AT_CDN) - 1);
    pos += sizeof(AT_CDN) - 1;
    memcpy(&(s_context.command_buf[pos]), device_id->serialno, sizeof(device_id->serialno));
    pos += sizeof(device_id->serialno);
    memcpy(&(s_context.command_buf[pos]), "\r", 1);
    pos += 1;
    error = ble_command(s_context.command_buf, pos, (const uint8_t*)"\r\nOK\r\n", 6);
    if (error) { assert(false);goto end; }

//    error = ble_command((const uint8_t*)"AT+DBI=ALL\r", 11, (const uint8_t*)"\r\nOK\r\n", 6);
//    if (error) { assert(false);goto end; }

    error = ble_command((const uint8_t*)"AT+SBO\r", 7, (const uint8_t*)"\r\nACK\r\n", 7);
    if (error) { assert(false);goto end; }

end:
    callback(DRVBLE_EVT_FACTORY_RESET_COMPLETE, error, 0);
}

/*
 * 送受信可能にする
 */
void ble_get_ready(DRVBLE_CALLBACK_T callback)
{
    assert(callback);
    DBGLOG0("ble_get_ready .");
    
    int error = DRVBLE_ERROR_NONE;

    drvcmn_gpio_pin_set(&GPIO_PIN_BLE_ON, false);	// BLE_ON => L (電源OFF)
    drvcmn_gpio_pin_set(&GPIO_PIN_RST, false);		// RESET => L (リセット)
    drvcmn_gpio_pin_set(&GPIO_PIN_INIT, true);		// INIT => H (初期化なし)

    drvcmn_gpio_pin_set(&GPIO_PIN_BLE_ON, true);	// BLE_ON => H (電源ON)
    dly_tsk(1);
    drvcmn_gpio_pin_set(&GPIO_PIN_RST, true);		// RESET => H (リセット解除)

    error = ble_command(NULL, 0, (const uint8_t*)"\r\nOK\r\n", 6);
    if (error) { goto end; }

//    error = ble_command((const uint8_t*)"AT+DBI=ALL\r", 11, (const uint8_t*)"\r\nOK\r\n", 6);
//    if (error) { assert(false);goto end; }

    command_buft[0] = '\0';
    static const char AT_CAT[] = "AT+CAT=";
    size_t pos = 0;
    memcpy(&(command_buft[pos]), AT_CAT, sizeof(AT_CAT) - 1);
    pos += sizeof(AT_CAT) - 1;
    memcpy(&(command_buft[pos]), "0,0040,0000,04", sizeof("0,0040,0000,04"));
    pos += sizeof("0,0040,0000,04");
    memcpy(&(command_buft[pos]), "\r", 1);
    pos += 1;
    error = ble_command(command_buft, pos, (const uint8_t*)"\r\nOK\r\n", 6);
    if (error) { assert(false);goto end; }

    error = ble_command((const uint8_t*)"AT+SBO\r", 7, (const uint8_t*)"\r\nACK\r\n", 7);
    if (error) { goto end; }

end:
    callback(DRVBLE_EVT_GET_READY_COMPLETE, error, 0);
}

/*
 * 電源OFF
 */
void ble_power_off(DRVBLE_CALLBACK_T callback)
{
    assert(callback);
    DBGLOG0("ble_power_off .");
    
    // GPIOを初期値に戻す
    for (int i = 0; i < sizeof(GPIO_PINS_BLE) / sizeof(GPIO_PINS_BLE[0]); i++) {
        if (GPIO_PINS_BLE[i].initial_value >= 0) {
            drvcmn_gpio_pin_set(GPIO_PINS_BLE[i].pin, GPIO_PINS_BLE[i].initial_value);
        }
    }

    callback(DRVBLE_EVT_POWER_OFF_COMPLETE, DRVBLE_ERROR_NONE, 0);
}

/*
 * 送信
 */
void ble_send(const uint8_t* data, size_t size, int32_t timeout, DRVBLE_CALLBACK_T callback)
{
    DBGLOG0("ble_send .");

    assert(data);
    assert(size > 0);
    assert(callback);

    size_t count = 0;
    int error = uart_send(&count, data, size, timeout);

#ifdef DUMP_UART_COMM
    cmndbg_hexdump(data, size, "ble_send");
#endif

    callback(DRVBLE_EVT_SEND_COMPLETE, error, count);
}

/*
 * 受信
 */
void ble_receive(uint8_t* data, size_t size, int32_t timeout, DRVBLE_CALLBACK_T callback)
{
    DBGLOG0("ble_receive .");
    assert(size > 0);
    assert(callback);
  
    size_t count = 0;
    int error = uart_receive(&count, data, size, timeout);

#ifdef DUMP_UART_COMM
    cmndbg_hexdump(data, size, "ble_receive");
#endif

    callback(DRVBLE_EVT_RECEIVE_COMPLETE, error, count);
}

/*
 * ATコマンド
 */
int ble_command(const uint8_t* command, size_t command_len, const uint8_t* resp, size_t resp_len)
{
    DBGLOG0("ble_command .");
    int error = DRVBLE_ERROR_NONE;

    if (command_len > 0) {
        assert(command);

        // コマンド送信
        size_t count = 0;
        error = uart_send(&count, command, command_len, AT_TIMEOUT);
        if (error) {
            goto end;
        }
    }

    if (resp_len > 0) {
        assert(resp);
        assert(resp_len < 32);

        // 応答受信
        uint8_t resp_buf[32];
        size_t count = 0;
        error = uart_receive(&count, resp_buf, resp_len, AT_TIMEOUT);
        if (error) {
            goto end;
        }

        // 応答内容確認
        if (memcmp(resp_buf, resp, resp_len) != 0) {
            assert(false);
        }
    }

end:
    return error;
}

/*
 * UART送信
 */
int uart_send(size_t* count, const uint8_t* data, size_t size, int32_t timeout)
{
    DBGLOG0("uart_send .");
    assert(count);
    assert(data);
    assert(size > 0);

    ER er = 0;
    int error = DRVBLE_ERROR_NONE;

    // イベントフラグをクリア
    er = clr_flg(FLG_DRVBLE, ~FLGPTN_UART_TXCOMPLETE);
    assert(er == E_OK);

    // UART送信
    drvcmn_uart_send(BLE_UART, data, size);

    // 完了待ち
    FLGPTN flgptn = 0;
    er = twai_flg(FLG_DRVBLE, FLGPTN_UART_TXCOMPLETE, TWF_ANDW, &flgptn, timeout);
    assert((er == E_OK) || (er == E_TMOUT));

    // タイムアウトの場合は中断処理
    if (er == E_TMOUT) {
        error = DRVBLE_ERROR_TIMEOUT;
        *count = drvcmn_uart_cancel_send(BLE_UART);
    }

    return error;
}

/*
 * 受信
 */
int uart_receive(size_t* count, uint8_t* data, size_t size, int32_t timeout)
{
    DBGLOG0("uart_receive .");
    assert(count);
    assert(size > 0);

    int error = DRVBLE_ERROR_NONE;
    ER er = 0;

    // イベントフラグをクリア
    er = clr_flg(FLG_DRVBLE, ~FLGPTN_UART_RXCOMPLETE);
    assert(er == E_OK);

    // UART受信
    drvcmn_uart_receive(BLE_UART, data, size);

    // 完了待ち
    FLGPTN flgptn = 0;
    er = twai_flg(FLG_DRVBLE, FLGPTN_UART_RXCOMPLETE | FLGPTN_RXCANCEL_REQ, TWF_ORW, &flgptn, timeout);
    assert((er == E_OK) || (er == E_TMOUT));

    // タイムアウトの場合は中断処理
    if (er == E_TMOUT) {
        error = DRVBLE_ERROR_TIMEOUT;
        *count = drvcmn_uart_cancel_receive(BLE_UART);
    } else if (flgptn & FLGPTN_RXCANCEL_REQ) {
        // キャンセル要求があったとき
        error = DRVBLE_ERROR_CANCELLED;
        *count = drvcmn_uart_cancel_receive(BLE_UART);
    }

    return error;
}

/*
 * UART ISRコールバック
 */
bool_t uart_isr_callback(int type, uint32_t opt)
{
    switch (type) {
    case DRVCMN_UART_TXCOMPLETE:
        iset_flg(FLG_DRVBLE, FLGPTN_UART_TXCOMPLETE);
        DBGLOG1("uart_isr_callback() tx (%08x)", opt);
        break;
    case DRVCMN_UART_RXCOMPLETE:
        iset_flg(FLG_DRVBLE, FLGPTN_UART_RXCOMPLETE);
        DBGLOG1("uart_isr_callback() rx (%08x)", opt);
        break;
    default:
        assert(false);
        break;
    }

    return false;
}


